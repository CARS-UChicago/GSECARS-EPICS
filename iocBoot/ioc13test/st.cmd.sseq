errlogInit(5000)
< envPaths
# Tell EPICS all about the record types, device-support modules, drivers,
# etc. in this build from CARS
dbLoadDatabase("../../dbd/CARSLinux.dbd")
CARSLinux_registerRecordDeviceDriver(pdbbase)

# Set up 2 serial ports on Moxa terminal server
# COM1 is for spectrometer, not EPICS
drvAsynIPPortConfigure("serial1", "164.54.160.30:4001")
#asynSetOption(serial1,0,baud,19200)
#asynSetOption(serial1,0,parity,none)
drvAsynIPPortConfigure("serial2", "164.54.160.30:4002")
#asynSetOption(serial2,0,baud,19200)
#asynSetOption(serial2,0,parity,none)
#asynSetOption(serial2,0,bits,8)
#asynSetOption(serial2,0,stop,1)
asynOctetSetInputEos("serial1",0,"\r")
asynOctetSetOutputEos("serial1",0,"\r")
asynOctetSetInputEos("serial2",0,"\r")
asynOctetSetOutputEos("serial2",0,"\r")
# Make these ports available from the iocsh command line
asynOctetConnect("serial1", "serial1")
asynOctetConnect("serial2", "serial2")

asynSetTraceIOMask("serial1",0,2)
#asynSetTraceMask("serial1",0,0x19)
asynSetTraceIOMask("serial2",0,2)
#asynSetTraceMask("serial2",0,0x19)

# Load asyn records on each of these ports
dbLoadTemplate("asynRecord.substitutions")

### Motors
dbLoadTemplate  "motors.template"

# A set of scan parameters for each positioner.  This is a convenience
# for the user.  It can contain an entry for each scannable thing in the
# crate.
dbLoadTemplate "scanParms.template"

### Allstop, alldone


### Scan-support software
# crate-resident scan.  This executes 1D, 2D, 3D, and 4D scans, and caches
# 1D data, but it doesn't store anything to disk.  (You need the data catcher
# or the equivalent for that.)  This database is configured to use the
# "alldone" database (above) to figure out when motors have stopped moving
# and it's time to trigger detectors.
dbLoadRecords("$(SSCAN)/sscanApp/Db/scan.db", "P=13TEST:,MAXPTS1=2000,MAXPTS2=200,MAXPTS3=20,MAXPTS4=10,MAXPTSH=10")

# Free-standing user string/number calculations (sCalcout records)
dbLoadRecords("$(CALC)/calcApp/Db/userStringCalcs10.db", "P=13TEST:")

# Free-standing user transforms (transform records)
dbLoadRecords("$(CALC)/calcApp/Db/userTransforms10.db", "P=13TEST:")

# Miscellaneous PV's, such as burtResult
dbLoadRecords("$(STD)/stdApp/Db/misc.db", "P=13TEST:")

# MCB-4B driver setup parameters:
#     (1) maximum # of controllers,
#     (2) maximum # axis per controller
#     (3) motor task polling rate (min=1Hz, max=60Hz)
MCB4BSetup(2, 4, 10)

# MCB-4B driver configuration parameters:
#     (1) controller
#     (2) asyn port name (e.g. serial1)
MCB4BConfig(0, "serial1")
MCB4BConfig(1, "serial2")

< ../save_restore_IOCSH.cmd
save_restoreSet_status_prefix("13TEST:")
dbLoadRecords("$(AUTOSAVE)/asApp/Db/save_restoreStatus.db", "P=13TEST:")

iocInit

### Start up the autosave task and tell it what to do.
# The task is actually named "save_restore".
# (See also, 'initHooks' above, which is the means by which the values that
# will be saved by the task we're starting here are going to be restored.
#
# save positions every five seconds
create_monitor_set("auto_positions.req", 5, "P=13TEST:")
# save other things every thirty seconds
create_monitor_set("auto_settings.req", 30, "P=13TEST:")

