< envPaths
# Start errlog Task before any possible error messsage to prevent
# erroneous "Interrupted system call" message on Linux OS.
errlogInit(0)
#
dbLoadDatabase("../../dbd/CARSLinux.dbd")
CARSLinux_registerRecordDeviceDriver(pdbbase)

dbLoadTemplate "motors_xps.template"

################################################################################
# XPS trajectoryScan records

# Database for trajectory scanning with the MM4005/GPD/XPS

dbLoadRecords("$(CARS)/CARSApp/Db/trajectoryScan.db", "P=13BMC:,R=traj1,NAXES=6,NELM=2000,NPULSE=2000,PORT=NULL,DONPV=13BMC:str:EraseStart,DONV=1,DOFFPV=13BMC:str:StopAll,DOFFV=1,IP=164.54.160.124,GROUP=GROUP1,AXIS1=GROUP1.PHI,AXIS2=GROUP1.KAPPA,AXIS3=GROUP1.OMEGA,AXIS4=GROUP1.PSI,AXIS5=GROUP1.2THETA,AXIS6=GROUP1.NU,AXIS7=NULL,AXIS8=NULL,XPSPORT=5001")

# cards (total controllers)
XPSSetup(2)

# card, IP, PORT, number of axes, active poll period (ms), idle poll period (ms)
XPSConfig(0, "164.54.160.124", 5001, 6, 10, 500)
# asyn port, driver name, controller index, max. axes)
drvAsynMotorConfigure("XPS1", "motorXPS", 0, 6)
# card, IP, PORT, number of axes, active poll period (ms), idle poll period (ms)
XPSConfig(1, "164.54.160.131", 5001, 8, 10, 500)
# asyn port, driver name, controller index, max. axes)
drvAsynMotorConfigure("XPS2", "motorXPS", 1, 8)

# card,  axis, groupName.positionerName, stepsPerUnit
XPSConfigAxis(0,0,"GROUP1.PHI",     1000)
XPSConfigAxis(0,1,"GROUP1.KAPPA",   5000)
XPSConfigAxis(0,2,"GROUP1.OMEGA",   5000)
XPSConfigAxis(0,3,"GROUP1.PSI",     4000)
XPSConfigAxis(0,4,"GROUP1.2THETA", 10000)
XPSConfigAxis(0,5,"GROUP1.NU",      4000)

# card,  axis, groupnumber, groupsize,axis in group, group, positioner
XPSConfigAxis(1,0,"GROUP1.Y1_BASE",    10000)
XPSConfigAxis(1,1,"GROUP2.Y2_BASE",    10000)
XPSConfigAxis(1,2,"GROUP3.Y3_BASE",    10000)
XPSConfigAxis(1,3,"GROUP4.TRX_BASE",     200)
XPSConfigAxis(1,4,"GROUP5.THETA-Y_BASE", 200)
XPSConfigAxis(1,5,"GROUP6.X_SAMPLE",    3816)
XPSConfigAxis(1,6,"GROUP7.Y_SAMPLE",    3816)
XPSConfigAxis(1,7,"GROUP8.Z_SAMPLE",    3816)

save_restoreSet_Debug(0)
save_restoreSet_IncompleteSetsOk(1)
save_restoreSet_DatedBackupFiles(1)
save_restoreSet_NumSeqFiles(3)
save_restoreSet_SeqPeriodInSeconds(300)
set_savefile_path("autosave")
set_pass0_restoreFile("auto_positions_xps.sav")
set_pass0_restoreFile("auto_settings_xps.sav")
set_pass1_restoreFile("auto_settings_xps.sav")
set_requestfile_path("./")
set_requestfile_path("$(CARS)",     "CARSApp/Db")
set_requestfile_path("$(AUTOSAVE)", "asApp/Db")
set_requestfile_path("$(CALC)",     "calcApp/Db")
set_requestfile_path("$(CAMAC)",    "camacApp/Db")
set_requestfile_path("$(CCD)",      "ccdApp/Db")
set_requestfile_path("$(DAC128V)",  "dac128VApp/Db")
set_requestfile_path("$(DXP)",      "dxpApp/Db")
set_requestfile_path("$(IP)",       "ipApp/Db")
set_requestfile_path("$(MCA)",      "mcaApp/Db")
set_requestfile_path("$(MOTOR)",    "motorApp/Db")
set_requestfile_path("$(OPTICS)",   "opticsApp/Db")
set_requestfile_path("$(QUADEM)",   "quadEMApp/Db")
set_requestfile_path("$(SSCAN)",    "sscanApp/Db")
set_requestfile_path("$(STD)",      "stdApp/Db")
set_requestfile_path("$(VME)",      "vmeApp/Db")
dbLoadRecords("$(AUTOSAVE)/asApp/Db/save_restoreStatus.db", "P=13BMC:")

iocInit

### Start up the autosave task and tell it what to do.
# The task is actually named "save_restore".
# (See also, 'initHooks' above, which is the means by which the values that
# will be saved by the task we're starting here are going to be restored.
#
< ../requestFileCommands
# save positions every five seconds
create_monitor_set("auto_positions_xps.req",5)
# save other things every thirty seconds
create_monitor_set("auto_settings_xps.req",30)

# Trajectory scanning with XPS
#seq(&xpsTrajectoryScan,"P=13BMC:,R=traj1,M1=m33,M2=m34,M3=m35,M4=m36,M5=m37,M6=m38,M7=m45,M8=m46")
